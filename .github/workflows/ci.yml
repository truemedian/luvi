name: CI

on: [push, pull_request]

concurrency: # Cancels pending runs when a PR gets updated.
  group: ${{ github.head_ref || github.run_id }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [tiny, regular, regular-asm]
        lua_engine: [LuaJIT, Lua]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Prepare
        run: chmod +x packaging/hbb && mkdir -p ~/.local/bin && mv packaging/hbb ~/.local/bin/hbb

      - name: Configure
        shell: hbb {0}
        run: |
          CFLAGS=${CFLAGS//-fvisibility=hidden}
          CFLAGS=${CFLAGS//-g}

          make ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }} WITHOUT_AMALG=1

      - name: Build
        shell: hbb {0}
        run: make

      - name: Test
        shell: hbb {0}
        run: |
          make test
          libcheck build/luvi

      - uses: actions/upload-artifact@v3
        with:
          name: luvi-Linux_x86_64-${{ matrix.build_type }}
          path: build/luvi

  build-linux32:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [tiny, regular]
        lua_engine: [LuaJIT, Lua]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Prepare
        run: chmod +x packaging/hbb32 && mkdir -p ~/.local/bin && mv packaging/hbb32 ~/.local/bin/hbb32

      - name: Configure
        shell: hbb32 {0}
        run: |
          CFLAGS=${CFLAGS//-fvisibility=hidden}
          CFLAGS=${CFLAGS//-g}

          make ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }} WITHOUT_AMALG=1

      - name: Build
        shell: hbb32 {0}
        run: make

      - name: Test
        shell: hbb32 {0}
        run: |
          make test
          libcheck build/luvi

      - uses: actions/upload-artifact@v3
        with:
          name: luvi-Linux_i686-${{ matrix.build_type }}
          path: build/luvi

  build-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [tiny, regular, regular-asm]
        lua_engine: [LuaJIT, Lua]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure
        run: make ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }} WITHOUT_AMALG=1

      - name: Build
        run: make

      - name: Test
        run: make test

      - uses: actions/upload-artifact@v3
        with:
          name: luvi-Darwin_x86_64-${{ matrix.build_type }}
          path: build/luvi

  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type:
          [tiny, tiny32, regular, regular32, regular-asm, regular32-asm]
        lua_engine: [LuaJIT, Lua]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: C:\Program Files\NASM
          key: ${{ runner.os }}-nasm

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          choco install NASM

      - name: Setup PATH
        run: |
          Write-Output "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          if ("${{ matrix.build_type }}" -match "32") {
            Write-Output "ARCH=ia32" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Output "ARCH=amd64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Configure
        run: ./make ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }} WITHOUT_AMALG=1

      - name: Build
        run: ./make

      - name: Test
        run: ./make test

      - uses: actions/upload-artifact@v3
        with:
          name: luvi-Windows_${{ env.ARCH }}-${{ matrix.build_type }}
          path: |
            build/Release/luvi.exe
            build/Release/luvi.lib
            build/Release/luvi_renamed.lib
