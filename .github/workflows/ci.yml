name: CI

on: [push, pull_request]

jobs:
  build-posix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-latest]
        build_type: [tiny, regular]
        lua_engine: [LuaJIT, Lua]
    env:
      ARTIFACT: ${{ matrix.lua_engine }}-${{ matrix.build_type }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Configure
      run: make ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }}

    - name: Build
      run: make

    - name: Test
      run: make test

    - name: Fetch System Name
      run: |
        echo "ARTIFACT=$(uname -s)-$(uname -m)-$ARTIFACT" >> $GITHUB_ENV

    - name: Rename Artifacts
      run: |
        cp build/luvi build/luvi-${{ env.ARTIFACT }}

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: |
          build/luvi-${{ env.ARTIFACT }}

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [tiny, regular]
        lua_engine: [LuaJIT, Lua]
        arch: [x86_64, i686]
        container: [manylinux2014, musllinux_1_2]
    env:
      ARTIFACT: Linux-${{ matrix.arch }}-${{ matrix.lua_engine }}-${{ matrix.build_type }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Build & Test
      uses: docker://quay.io/pypa/${{ matrix.container }}_${{ matrix.arch }}
      with:
        entrypoint: /bin/bash -c
      args: |
        if which yum; then
          yum install -y cmake3
        else
          apk add cmake
        fi

        make ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }}
        make
        make test

    - name: Fetch System Name
      run: |
        if [ "${{ matrix.container }}" = "musllinux_1_2" ]; then
          echo "ARTIFACT=$ARTIFACT-musl" >> $GITHUB_ENV
        else
          echo "ARTIFACT=$ARTIFACT-glibc" >> $GITHUB_ENV
        fi

    - name: Rename Artifacts
      run: |
        cp build/luvi build/luvi-${{ env.ARTIFACT }}

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: |
          build/luvi-${{ env.ARTIFACT }}

  build-mingw:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [tiny, regular]
        lua_engine: [LuaJIT, Lua]
        msystem: [mingw32, mingw64]
    env:
      ARTIFACT: Windows-${{ matrix.msystem }}-${{ matrix.lua_engine }}-${{ matrix.build_type }}

    steps:
    - name: 'Setup MSYS2'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        pacboy: toolchain:p cmake:p
        install: git

    - name: Install NASM
      if: matrix.build_type == 'regular'
      run: |
        choco install nasm
        echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Configure
      shell: msys2 {0}
      run: mingw32-make ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }} GENERATOR="MinGW Makefiles"

    - name: Build
      shell: msys2 {0}
      run: mingw32-make 

    - name: Test
      shell: msys2 {0}
      run: mingw32-make test

    - name: Rename Artifacts
      run: |
        cp build/luvi.exe build/luvi-${{ env.ARTIFACT }}.exe

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: |
          build/luvi-${{ env.ARTIFACT }}.exe

  build-msvc:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [tiny, regular]
        lua_engine: [LuaJIT, Lua]
        arch: [AMD64, X86]
    env:
      ARTIFACT: Windows-msvc-${{ matrix.arch }}-${{ matrix.lua_engine }}-${{ matrix.build_type }}

    steps:
    - name: Setup MSVC Developer Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Install NASM
      if: matrix.build_type == 'regular'
      run: |
        choco install nasm
        echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Configure
      run: nmake ${{ matrix.build_type }} WITH_LUA_ENGINE=${{ matrix.lua_engine }}

    - name: Build
      run: nmake

    - name: Test
      run: nmake test

    - name: Rename Artifacts
      run: |
        cp build/Release/luvi.exe         build/Release/luvi-${{ env.ARTIFACT }}.exe
        cp build/Release/luvi.lib         build/Release/luvi-${{ env.ARTIFACT }}.lib
        cp build/Release/luvi_renamed.lib build/Release/luvi-${{ env.ARTIFACT }}_renamed.lib

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: |
          build/luvi-${{ env.ARTIFACT }}*

  publish:
    # if: startsWith(github.ref, 'refs/tags/')
    needs: [build-posix, build-linux, build-mingw, build-msvc]
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: download
        merge-multiple: true

    - name: Publish Release
      uses: actions/upload-artifact@v4
      with:
        name: artifacts
        path: download